generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                Int         @id @default(autoincrement())
  username          String      @unique
  email             String      @unique
  password          String
  bio               String
  xp                Int         @default(0)
  streak            DateTime    @default(now())
  awards            Award[]     @relation("UserAwards")
  awardAdmin        Award[]     @relation("UserAwardsAdmin")
  profileImageId    Int
  backgroundImageId Int
  bannerImageId     Int
  profileImage      Image       @relation("UserProfileImage", fields: [profileImageId], references: [id], onDelete: Cascade)
  backgroundImage   Image       @relation("UserBackgroundImage", fields: [backgroundImageId], references: [id], onDelete: Cascade)
  bannerImage       Image       @relation("UserBannerImage", fields: [bannerImageId], references: [id], onDelete: Cascade)
  accentColor       String      @default("#FFFFFF")
  comments          Comment[]   @relation("UserComments")
  posts             Post[]      @relation("UserPosts")
  communities       Community[] @relation("UserCommunities")
  communitiesAdmin  Community[] @relation("UserCommunitiesAdmin")
  likedPosts        Post[]      @relation("UserLikedPosts")
  likedComments     Comment[]   @relation("UserLikedComments")
  followedBy        User[]      @relation("UserFollows")
  following         User[]      @relation("UserFollows")
  logins            Login[]     @relation("UserLogins")
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([profileImageId, backgroundImageId, bannerImageId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  likes     User[]   @relation("UserLikedComments")
  userId    Int
  postId    Int
  user      User     @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, postId])
}

model Community {
    id                Int      @id @default(autoincrement())
    communityName     String
    description       String
    profileImageId    Int
    backgroundImageId Int
    bannerImageId     Int
    profileImage      Image    @relation("CommunityProfileImage", fields: [profileImageId], references: [id], onDelete: Cascade)
    backgroundImage   Image    @relation("CommunityBackgroundImage", fields: [backgroundImageId], references: [id], onDelete: Cascade)
    bannerImage       Image    @relation("CommunityBannerImage", fields: [bannerImageId], references: [id], onDelete: Cascade)
    adminUserId       Int
    adminUser         User     @relation("UserCommunitiesAdmin", fields: [adminUserId], references: [id], onDelete: Cascade)
    users	      User[]   @relation("UserCommunities")
    posts             Post[]   @relation("CommunityPosts")
    awards            Award[]  @relation("CommunityAwards")
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt

    @@index([profileImageId, backgroundImageId, bannerImageId, adminUserId])
}

model Post {
  id          Int        @id @default(autoincrement())
  ad          Boolean    @default(false)
  title       String
  text        String?
  imageId     Int?
  image       Image?     @relation("PostImage", fields: [imageId], references: [id], onDelete: Cascade)
  likes       User[]     @relation("UserLikedPosts")
  userId      Int
  communityId Int?
  user        User       @relation("UserPosts", fields: [userId], references: [id], onDelete: Cascade)
  community   Community? @relation("CommunityPosts", fields: [communityId], references: [id], onDelete: Cascade)
  comments    Comment[]  @relation("PostComments")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([imageId, userId, communityId])
}

model Image {
  id               Int      @id @default(autoincrement())
  type             String
  path             String
  originalFileHash String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  userProfileImages         User[]      @relation("UserProfileImage")
  userBackgroundImages      User[]      @relation("UserBackgroundImage")
  userBannerImages          User[]      @relation("UserBannerImage")
  communityProfileImages    Community[] @relation("CommunityProfileImage")
  communityBackgroundImages Community[] @relation("CommunityBackgroundImage")
  communityBannerImages     Community[] @relation("CommunityBannerImage")
  postImages                Post[]      @relation("PostImage")
  awardImages               Award[]     @relation("AwardImage")

  @@unique([type, originalFileHash])
}

model Award {
  id           Int       @id @default(autoincrement())
  awardName    String
  awardImageId Int
  awardImage   Image     @relation("AwardImage", fields: [awardImageId], references: [id], onDelete: Cascade)
  users        User[]    @relation("UserAwards")
  adminUserId  Int
  adminUser    User      @relation("UserAwardsAdmin", fields: [adminUserId], references: [id], onDelete: Cascade)
  communityId  Int
  community    Community @relation("CommunityAwards", fields: [communityId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([awardImageId, adminUserId, communityId])
}

model Login {
  id        Int      @id @default(autoincrement())
  key       String   @unique @default(uuid())
  userId    Int
  user      User     @relation("UserLogins", fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
